package com.ly666.controller.mgrAdmin;import com.ly666.entity.Admin;import com.ly666.service.LoginService;import org.springframework.stereotype.Controller;import org.springframework.web.bind.annotation.RequestMapping;import org.springframework.web.bind.annotation.ResponseBody;import javax.annotation.Resource;import javax.servlet.http.Cookie;import javax.servlet.http.HttpServletRequest;import javax.servlet.http.HttpServletResponse;import javax.servlet.http.HttpSession;import java.util.ArrayList;import java.util.List;/** * @author ：luoyi * @date ：Created in 2019/3/3 21:53 * @desc : {} */@Controllerpublic class LoginAction {	@Resource(name = "LoginService")	private LoginService loginService;	@RequestMapping("/login")	public String login(String username, String password, Boolean remember,	                    HttpServletRequest request, HttpServletResponse response) {		if (username != null && password != null) {			Admin admin = loginService.login(username, password);			if (admin != null) {				HttpSession session = request.getSession();				session.setAttribute("admin", admin);				if (remember != null) {					Cookie admin_user = new Cookie("admin_user", username);					Cookie admin_pwd = new Cookie("admin_pwd", password);					admin_user.setMaxAge(60 * 60 * 24 * 7);					admin_pwd.setMaxAge(60 * 60 * 24 * 7);					response.addCookie(admin_user);					response.addCookie(admin_pwd);				} else {					Cookie[] cookies = request.getCookies();					if (cookies != null && cookies.length > 0) {						for (Cookie cookie : cookies) {							if ("admin_user".equals(cookie.getName())) {								cookie.setMaxAge(0);								response.addCookie(cookie);							}							if ("admin_pwd".equals(cookie.getName())) {								cookie.setMaxAge(0);								response.addCookie(cookie);							}						}					}				}				return "redirect:/bk_admin/mgr_index.jsp";			} else {				request.setAttribute("error", "login error");				return "/mgr_login.jsp";			}		}		return "redirect:/mgr_login.jsp";	}	@RequestMapping("exit")	public String exit(HttpSession session) {		session.removeAttribute("admin");		return "redirect:/index.jsp";	}	@RequestMapping("checkAdminCookie")	@ResponseBody	public List<Admin> checkAdminCookie(HttpServletRequest request) {		ArrayList<Admin> admins = new ArrayList<>();		Admin admin = new Admin();		Cookie[] cookies = request.getCookies();		if (cookies == null || cookies.length == 0)			return null;		else {			for (Cookie cookie : cookies) {				if ("admin_user".equals(cookie.getName()))					admin.setAdmin_name(cookie.getValue());				if ("admin_pwd".equals(cookie.getName()))					admin.setAdmin_pwd(cookie.getValue());			}		}		admins.add(admin);		return admins;	}	@RequestMapping("checkAdminSession")	public String checkAdminSession(HttpSession session) {		if ((session.getAttribute("admin") != null))			return "redirect:/bk_admin/mgr_index.jsp";		else			return "redirect:/mgr_login.jsp";	}}